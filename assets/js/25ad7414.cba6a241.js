"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[52206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70569:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={},l=void 0,r={unversionedId:"Lab/Application-Interaction/Arena/content/so-cloud",id:"Lab/Application-Interaction/Arena/content/so-cloud",title:"so-cloud",description:"SO Cloud",source:"@site/docs/Lab/Application-Interaction/Arena/content/so-cloud.md",sourceDirName:"Lab/Application-Interaction/Arena/content",slug:"/Lab/Application-Interaction/Arena/content/so-cloud",permalink:"/operating-systems/Lab/Application-Interaction/Arena/content/so-cloud",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"SO Cloud",id:"so-cloud",level:2},{value:"Initial Liftoff",id:"initial-liftoff",level:3},{value:"More Implementation Details",id:"more-implementation-details",level:3},{value:"(Even) More Implementation Details",id:"even-more-implementation-details",level:3},{value:"Virtual Machine Creation",id:"virtual-machine-creation",level:3},{value:"Disk Creation",id:"disk-creation",level:3},{value:"Practice: Create a New Disk by Hand",id:"practice-create-a-new-disk-by-hand",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"so-cloud"},"SO Cloud"),(0,o.kt)("p",null,'In this section we are going to build a "toy cloud" called ',(0,o.kt)("inlineCode",{parentName:"p"},"SO Cloud"),".\nSimilar to a real cloud (like ",(0,o.kt)("inlineCode",{parentName:"p"},"aws"),"), ",(0,o.kt)("inlineCode",{parentName:"p"},"SO Cloud")," will allow us to create and manage virtual machines, through an ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," API."),(0,o.kt)("h3",{id:"initial-liftoff"},"Initial Liftoff"),(0,o.kt)("p",null,"First, we need to do some initial setup:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ ./initial_setup.sh\n")),(0,o.kt)("p",null,"Then Go to ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud")," and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ ./setup_db.sh\nSetting up db\nCreating tables\n\nstudent@os:~/.../so-cloud$ docker-compose build\n...\n\nstudent@os:~/.../so-cloud$ docker-compose up\n")),(0,o.kt)("p",null,"Now the http API will listen on port ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:5000"),". Let's try:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ curl localhost:5000\nWelcome to SO Cloud!\n")),(0,o.kt)("p",null,"Let's check the running virtual machines:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ curl localhost:5000/vm_list\n[]\n")),(0,o.kt)("p",null,"We got an empty list, since there are no virtual machines yet.\nLet's create one (the command will take about 1 minute to complete):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../so-cloud$ curl -H "Content-Type: application/json" \\\n    -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G"}\' \\\n    localhost:5000/vm_create\n{"id":1,"status":"ok"}\n')),(0,o.kt)("p",null,"Check the virtual machine list again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../so-cloud$ curl localhost:5000/vm_list\n[{"id":1,"name":"my_vm"}]\n')),(0,o.kt)("p",null,"We can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")," tool to pretty print the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," outputs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../so-cloud$ curl -s localhost:5000/vm_list | jq .\n[\n  {\n    "id": 1,\n    "name": "my_vm"\n  }\n]\n')),(0,o.kt)("p",null,"We see our newly created virtual machine.\nLet's get some information about it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../so-cloud$ curl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04"\n}\n')),(0,o.kt)("p",null,"We recognize some parameters that we specified at creation time, like ",(0,o.kt)("inlineCode",{parentName:"p"},"mem_size")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"disk_size"),".\nAlso, the IP address ",(0,o.kt)("inlineCode",{parentName:"p"},"192.168.0.2")," has been allocated for our machine."),(0,o.kt)("h3",{id:"more-implementation-details"},"More Implementation Details"),(0,o.kt)("p",null,"The application consists of 2 containers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"db"),", which runs a ",(0,o.kt)("inlineCode",{parentName:"p"},"MySQL")," database")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"so-cloud"),", which runs the web application and the virtual machines"))),(0,o.kt)("p",null,"Let's check them.\nAfter running ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose up"),", in another terminal run ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose ps"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ docker-compose ps\n       Name                      Command              State                    Ports\n------------------------------------------------------------------------------------------------------\nso-cloud_db_1         docker-entrypoint.sh mariadbd   Up      3306/tcp\nso-cloud_so-cloud_1   python3 -u app.py               Up      0.0.0.0:5000->5000/tcp,:::5000->5000/tcp\n\n")),(0,o.kt)("p",null,"Now let's move inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"so-cloud")," container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ docker-compose exec so-cloud bash\nroot@89a986d2526e:/app# \n")),(0,o.kt)("p",null,"Since the virtual machines run inside this container, we should expect to see the one that we created in the previous step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"root@89a986d2526e:/app# ps -ef | cat\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 09:02 ?        00:00:00 /sbin/docker-init -- python3 -u app.py\nroot           7       1  0 09:02 ?        00:00:00 python3 -u app.py\nroot          12       7  6 09:02 ?        00:00:41 qemu-system-x86_64 -enable-kvm -m 2048 -hda /vm-disks/1/disk.qcow2 -net nic,macaddr=52:54:00:12:34:00 -net tap,ifname=tap0,script=no -monitor telnet::10001,server,nowait -serial telnet::10002,server,nowait -nographic\nroot          27       0  0 09:11 pts/3    00:00:00 bash\nroot          35      27  0 09:13 pts/3    00:00:00 ps -ef\n")),(0,o.kt)("p",null,"Indeed, a ",(0,o.kt)("inlineCode",{parentName:"p"},"qemu-system-x86_64")," process is there.\nThe vm should be accessible via ",(0,o.kt)("inlineCode",{parentName:"p"},"ssh")," on the IP ",(0,o.kt)("inlineCode",{parentName:"p"},"192.168.0.2")," with password ",(0,o.kt)("inlineCode",{parentName:"p"},"123456")," (if you get ",(0,o.kt)("inlineCode",{parentName:"p"},"connection refused")," here you need to wait a bit more for the machine to boot):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# ssh root@192.168.0.2\nThe authenticity of host '192.168.0.2 (192.168.0.2)' can't be established.\nED25519 key fingerprint is SHA256:3Mfa1fB9y4knUDJWEmEOTz9dWOE7SVhnH/kCBJ15Y0E.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.0.2' (ED25519) to the list of known hosts.\nroot@192.168.0.2's password: \nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:49:55 2022\nroot@ubuntu:~# \n")),(0,o.kt)("p",null,"The vm is also accessible on the serial console (notice the ",(0,o.kt)("inlineCode",{parentName:"p"},"-serial telnet::10002,server,nowait")," argument to qemu).\nIf we start a telnet connection on port ",(0,o.kt)("inlineCode",{parentName:"p"},"10002"),", qemu will show us the virtual machine's serial console (basically the output that we normally see when running a virtual machine in text mode)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# telnet localhost 10002\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n\nubuntu login: root\nPassword: \nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:50:11 UTC 2022 from 192.168.0.1 on pts/0\nroot@ubuntu:~# \n")),(0,o.kt)("p",null,"To exit the serial console press ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL+]"),", then type ",(0,o.kt)("inlineCode",{parentName:"p"},"quit"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~# \ntelnet> quit\nConnection closed.\nroot@adf6e0bf4e6e:/app# \n")),(0,o.kt)("h3",{id:"even-more-implementation-details"},"(Even) More Implementation Details"),(0,o.kt)("p",null,"There are 3 objects used by the system:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"vm")," - the actual virtual machine")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"disk")," - holds information about virtual machine disks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"network")," - holds information about a network"))),(0,o.kt)("p",null,"Each of these objects are stored in a table in the database."),(0,o.kt)("p",null,"Let's check the database contents (take the password from the ",(0,o.kt)("inlineCode",{parentName:"p"},"setup_db.sh")," file):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ docker-compose exec db mysql -u so-cloud -p so-cloud\nEnter password: \n...\nMariaDB [so-cloud]> select * from vm;\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n| id | name  | disk_id | mem_size   | network_id | tap_interface_idx | ip         | qemu_pid | qemu_monitor_port | qemu_serial_port | state |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n|  1 | my_vm |       1 | 2147483648 |          1 |                 0 | 3232235522 |       18 |             10001 |            10002 |     0 |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n1 row in set (0.001 sec)\n\nMariaDB [so-cloud]> select * from disk;\n+----+-------------+---------------+\n| id | size        | template_name |\n+----+-------------+---------------+\n|  1 | 10737418240 | ubuntu_22.04  |\n+----+-------------+---------------+\n1 row in set (0.000 sec)\n\nMariaDB [so-cloud]> select * from network;\n+----+---------+----------------------+------------+------------+\n| id | name    | bridge_interface_idx | ip         | mask       |\n+----+---------+----------------------+------------+------------+\n|  1 | default |                    0 | 3232235520 | 4294901760 |\n+----+---------+----------------------+------------+------------+\n1 row in set (0.000 sec)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Note: in real life DON'T store passwords in text files inside a repository"),"."),(0,o.kt)("p",null,"Some observations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There is a ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," network already created.\nThat is why we specified ",(0,o.kt)("inlineCode",{parentName:"p"},'"network": "default"')," in the vm creation parameters, and we see that the vm is assigned to this network (",(0,o.kt)("inlineCode",{parentName:"p"},"network_id")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),").")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This network's ip address is ",(0,o.kt)("inlineCode",{parentName:"p"},"3232235520"),", which in hex is ",(0,o.kt)("inlineCode",{parentName:"p"},"0xC0A80000"),", that is, ",(0,o.kt)("inlineCode",{parentName:"p"},"192.168.0.0"),".\nThe netmask is ",(0,o.kt)("inlineCode",{parentName:"p"},"0xFFFF0000"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"/16"),".\nThis explains why our vm received the ip address ",(0,o.kt)("inlineCode",{parentName:"p"},"192.168.0.2"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There is a disk with the size of ",(0,o.kt)("inlineCode",{parentName:"p"},"10GB"),", based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu_22.04")," template, exactly like we requested.\nThis disk is assigned to our vm (",(0,o.kt)("inlineCode",{parentName:"p"},"disk_id")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),").\nThe disk file will reside in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud/vm-disks/1/disk.qcow2"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"/vm-disks/1/disk.qcow2")," inside the container."))),(0,o.kt)("h3",{id:"virtual-machine-creation"},"Virtual Machine Creation"),(0,o.kt)("p",null,"Take a look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"vm_create")," function in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud/so-cloud/vm.py"),".\nThe steps undertaken are roughly:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"some initial allocations: the virtual machine IP address, network interface, qemu ports, etc")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"the virtual machine disk is created, based on the template specified by the user (like ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu_22.04"),")")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"the virtual machine is started with this new disk, in order to do some more customizations (the ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"the virtual machine is restarted again with the final disk in place"))),(0,o.kt)("h3",{id:"disk-creation"},"Disk Creation"),(0,o.kt)("p",null,"All the disk templates are in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud/disk-templates"),".\nThis directory will be mounted in ",(0,o.kt)("inlineCode",{parentName:"p"},"/disk-templates")," inside the container."),(0,o.kt)("p",null,"The first step of disk creation is to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"qcow2")," disk file based on the template specified by the user (step 2 from the explanation above)."),(0,o.kt)("p",null,"This is done in the ",(0,o.kt)("inlineCode",{parentName:"p"},"create_disk_from_template")," function in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud/so-cloud/disk.py"),".\nThe function will first create a disk object in the database, then it will call 2 shell scripts: ",(0,o.kt)("inlineCode",{parentName:"p"},"create_disk_from_template.sh")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"setup_root_password.sh"),"."),(0,o.kt)("p",null,"The second step is to start the virtual machine with this disk and do some customizations (step 3 from above)."),(0,o.kt)("p",null,"This is done in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/so-cloud/so-cloud/vm.py"),".\nThe code will connect to the vm's qemu serial console using ",(0,o.kt)("inlineCode",{parentName:"p"},"pexpect"),".\nThen it will use a series of ",(0,o.kt)("inlineCode",{parentName:"p"},"expect_exact")," + ",(0,o.kt)("inlineCode",{parentName:"p"},"sendline")," pairs to interact with the virtual machine, as if those commands were typed in the command-line."),(0,o.kt)("h3",{id:"practice-create-a-new-disk-by-hand"},"Practice: Create a New Disk by Hand"),(0,o.kt)("p",null,"Let's replicate the above mentioned steps and create a new disk ourselves."),(0,o.kt)("p",null,"First, we have to call the 2 scripts from the ",(0,o.kt)("inlineCode",{parentName:"p"},"create_disk_from_template")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ ./disk-templates/ubuntu_22.04/create_disk_from_template.sh ./disk-templates/ubuntu_22.04/ubuntu_22.04.qcow2 my-disk.qcow2 10737418240\nImage resized.\n\nstudent@os:~/.../so-cloud$ ls -lh my-disk.qcow2\n-rw-r--r-- 1 student student 619M Nov 20 15:41 my-disk.qcow2\n\nstudent@os:~/.../so-cloud$ sudo ./disk-templates/ubuntu_22.04/setup_root_password.sh my-disk.qcow2 123456\n")),(0,o.kt)("p",null,"Now we can start a qemu instance using this disk:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../so-cloud$ qemu-system-x86_64 -enable-kvm -m 2G -hda my-disk.qcow2 -nographic\n...\nUbuntu 22.04 LTS ubuntu ttyS0\n\nubuntu login: root\nPassword: \n...\nroot@ubuntu:~# \n")),(0,o.kt)("p",null,"Here we can further run customization commands, like the ones in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function, or any other things that we want."),(0,o.kt)("p",null,"When we're done, we run the ",(0,o.kt)("inlineCode",{parentName:"p"},"halt")," command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~# halt\nroot@ubuntu:~#          Stopping Session 1 of User root...\n[  OK  ] Removed slice Slice /system/modprobe.\n[  OK  ] Stopped target Graphical Interface.\n...\n         Starting System Halt...\n[   86.431398] reboot: System halted\n")),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"System halted")," message is printed, press ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL+A X")," to exit qemu (that is, press ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL+A"),", release ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", press ",(0,o.kt)("inlineCode",{parentName:"p"},"X"),")."))}c.isMDXComponent=!0}}]);