"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[12652],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},62283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},o="Client-Server Model",s={unversionedId:"Lab/I/O/Redirections/content/client-server-model",id:"Lab/I/O/Redirections/content/client-server-model",title:"Client-Server Model",description:"Up to now we've avoided code snippets using TCP.",source:"@site/docs/Lab/I/O/Redirections/content/client-server-model.md",sourceDirName:"Lab/I/O/Redirections/content",slug:"/Lab/I/O/Redirections/content/client-server-model",permalink:"/operating-systems/Lab/I/O/Redirections/content/client-server-model",draft:!1,tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Server vs Client",id:"server-vs-client",level:2},{value:"Establishing the Connection",id:"establishing-the-connection",level:2},{value:"Steps Taken by the Server",id:"steps-taken-by-the-server",level:3},{value:"Steps Taken by the Client",id:"steps-taken-by-the-client",level:3},{value:"Practice: Client",id:"practice-client",level:3},{value:"Practice: Just a Little Bit More Deluge",id:"practice-just-a-little-bit-more-deluge",level:2}],c={toc:p};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client-server-model"},"Client-Server Model"),(0,i.kt)("p",null,"Up to now we've avoided code snippets using TCP.\nNot anymore.\nKeep in mind that all socket functions in the Berkeley API have very detailed and informative ",(0,i.kt)("inlineCode",{parentName:"p"},"man")," pages.\nFor example, here are the ",(0,i.kt)("inlineCode",{parentName:"p"},"man")," pages for ",(0,i.kt)("a",{parentName:"p",href:"https://linux.die.net/man/2/sendto"},(0,i.kt)("inlineCode",{parentName:"a"},"sendto()"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://linux.die.net/man/2/recvfrom"},(0,i.kt)("inlineCode",{parentName:"a"},"recvfrom()"))," that are used with UDP sockets."),(0,i.kt)("p",null,"Going back to our ",(0,i.kt)("a",{parentName:"p",href:"/operating-systems/Lab/I/O/Redirections/content/remote-io#one-browser---many-connections"},"initial example")," with how the browser gets data from ",(0,i.kt)("a",{parentName:"p",href:"https://open-education-hub.github.io/operating-systems/"},"https://open-education-hub.github.io/operating-systems/"),", by now we know the preferred method for transferring text is TCP."),(0,i.kt)("p",null,"Unlike UDP, TCP is ",(0,i.kt)("strong",{parentName:"p"},"connection-oriented"),".\nThis is why in the example with the browser we kept using the word ",(0,i.kt)("strong",{parentName:"p"},"conenction"),".\nWhat'd different from UDP is that this connection is ",(0,i.kt)("strong",{parentName:"p"},"bidirectional"),", so we can both ",(0,i.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/send.2.html"},(0,i.kt)("inlineCode",{parentName:"a"},"send()"))," and receive (",(0,i.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/recv.2.html"},(0,i.kt)("inlineCode",{parentName:"a"},"recv()")),") data from it.\nNotice that the syscalls have changed.\nWe were using ",(0,i.kt)("inlineCode",{parentName:"p"},"sendto()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"recvfrom()")," for UDP and now we're using ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"recv()")," for TCP.\nAnd yes, despite the fact that we're using Python, these are syscalls.\nYou saw them in C when you solved the ",(0,i.kt)("a",{parentName:"p",href:"/operating-systems/Lab/I/O/Redirections/content/remote-io#practice-network-sockets-challenge"},"challenge"),"."),(0,i.kt)("h2",{id:"server-vs-client"},"Server vs Client"),(0,i.kt)("p",null,"When discussing servers and clients, the server is the passive actor.\nIt may have some data and wait for clients to ask for this data.\nOr it may require some data and wait for clients to send it.\nEither way, it is ",(0,i.kt)("strong",{parentName:"p"},"listening")," for connections."),(0,i.kt)("p",null,"The client is the active actor, being the one who initiates the connection."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/operating-systems/Lab/I/O/Redirections/quiz/client-server-sender-receiver"},"Quiz")),(0,i.kt)("h2",{id:"establishing-the-connection"},"Establishing the Connection"),(0,i.kt)("p",null,"There is a series of steps that a client and most importantly a server must take to establish a TCP connection."),(0,i.kt)("h3",{id:"steps-taken-by-the-server"},"Steps Taken by the Server"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"socket()")," to create a socket.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bind()")," this socket to an IP and a port.\nUp to now, this is nothing new.\nHowever, with TCP sockets, ",(0,i.kt)("inlineCode",{parentName:"p"},"bind()")," doesn't automatically make them listen for connectons.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/listen.2.html"},(0,i.kt)("inlineCode",{parentName:"a"},"listen()"))," to make the socket ready to receive connections.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/accept.2.html"},(0,i.kt)("inlineCode",{parentName:"a"},"accept()"))," to set up one connection initiated by a client.\nFrom now, the connection is established.\n",(0,i.kt)("inlineCode",{parentName:"p"},"accept()")," returns a new socket which is will be further used for communication between the server and the client.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Exchange messages with the client.\nThe server can both read messages from the client and send responses back using the same socket returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"accept()"),".\nWhen done, ",(0,i.kt)("inlineCode",{parentName:"p"},"close()")," the socket returned by accept and repeat from step ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),"."))),(0,i.kt)("h3",{id:"steps-taken-by-the-client"},"Steps Taken by the Client"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"socket()")," to create a socket.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/connect.2.html"},(0,i.kt)("inlineCode",{parentName:"a"},"connect()")),' to... you guessed it: connect to the server.\nThis step is like an "answer" to step ',(0,i.kt)("inlineCode",{parentName:"p"},"4")," from the server.\nWe can say that the server ",(0,i.kt)("inlineCode",{parentName:"p"},"accept()"),"s a ",(0,i.kt)("inlineCode",{parentName:"p"},"connect()")," request from the client.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Exchange messages with the server.\nThe client can both send messages to the server and read responses from it using the same socket created during step ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"."))),(0,i.kt)("p",null,"Below is an image summarising the steps above:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Steps to Establish a Connection",src:n(22990).Z,width:"562",height:"712"})),(0,i.kt)("h3",{id:"practice-client"},"Practice: Client"),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"support/client-server/"),".\nHere you will find a minimalistic server implementation in ",(0,i.kt)("inlineCode",{parentName:"p"},"server.py"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Read the code and identify the steps outlined above.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the code then run ",(0,i.kt)("inlineCode",{parentName:"p"},"lsof")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"netstat")," in other terminals to identify the file descriptor corresponding to the listening file descriptor")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now fill in the code in ",(0,i.kt)("inlineCode",{parentName:"p"},"client.py")," to be able to send messages to the server and receive responses from it.\nRun multiple clients."))),(0,i.kt)("h2",{id:"practice-just-a-little-bit-more-deluge"},"Practice: Just a Little Bit More Deluge"),(0,i.kt)("p",null,"We've already said that Deluge uses an ",(0,i.kt)("a",{parentName:"p",href:"/operating-systems/Lab/I/O/Redirections/content/networking-101#practice-encapsulation-example-deluge-revived"},"abstraction over TCP"),' to handle socket operations, so we don\'t have the luxury of seeing it perform remote I/O "manually".\nHowever, there are a few instances where Deluge uses socket operations itself, mostly for testing purposes.'),(0,i.kt)("p",null,"Deluge saves its PIDs (it can spawn multiple processes) and ports in a file.\nFind the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_daemon_running()")," method.\nThis method uses the aforementioned file to check if a given process is Deluge or some other process.\nTo do this, it ",(0,i.kt)("inlineCode",{parentName:"p"},"connect()"),"s to that process's socket.\nIf it can't then that process is not Deluge.\nOtherwise it is Deluge and that connection is immediately closed :))\nThis may sound like a stupid way of checking whether a process is Deluge or not, but ",(0,i.kt)("em",{parentName:"p"},"if it's stupid and it works, then it's not stupid!")))}m.isMDXComponent=!0},22990:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connection-establishment-05ca0959a59f3204b866855631182875.svg"}}]);