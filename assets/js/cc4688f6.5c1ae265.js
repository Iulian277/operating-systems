"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[27578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,d=m["".concat(p,".").concat(u)]||m[u]||h[u]||r;return n?a.createElement(d,i(i({ref:t},l),{},{components:n})):a.createElement(d,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},29579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"Lab/Compute/Synchronization/content/copy-on-write",id:"Lab/Compute/Synchronization/content/copy-on-write",title:"copy-on-write",description:"Copy-on-Write",source:"@site/docs/Lab/Compute/Synchronization/content/copy-on-write.md",sourceDirName:"Lab/Compute/Synchronization/content",slug:"/Lab/Compute/Synchronization/content/copy-on-write",permalink:"/operating-systems/Lab/Compute/Synchronization/content/copy-on-write",draft:!1,tags:[],version:"current",frontMatter:{}},p={},c=[{value:"Copy-on-Write",id:"copy-on-write",level:2},{value:"Practice",id:"practice",level:3}],l={toc:c};function h(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"copy-on-write"},"Copy-on-Write"),(0,o.kt)("p",null,'So far you know that the parent and child process have separate virtual address spaces.\nBut how are they created, namely how are they "separated"?\nAnd what about the ',(0,o.kt)("strong",{parentName:"p"},"PAS (physical address space)"),"?\nOf course we would like the stack of the parent, for example, to be physically distinct from that of the child so they can execute different functions and use different local variables."),(0,o.kt)("p",null,"But should ",(0,o.kt)("strong",{parentName:"p"},"all")," memory sections from the PAS of the parent be distinct from that of the child?\nWhat about some read-only memory sections, such as ",(0,o.kt)("inlineCode",{parentName:"p"},".text")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".rodata"),"?\nAnd what about the heap, where the child ",(0,o.kt)("em",{parentName:"p"},"may")," use some data previously written by the parent and then override it with its own data."),(0,o.kt)("p",null,"The answer to all of these questions is a core mechanism of multi-process operating systems called ",(0,o.kt)("strong",{parentName:"p"},"Copy-on-Write"),".\nIt works according to one very simple principle:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The VAS of the child process initially points to the same PAS as that of the parent.\nA (physical) frame is only duplicated by the child when it attempts to ",(0,o.kt)("strong",{parentName:"p"},"write")," data to it.")),(0,o.kt)("p",null,"This ensures that read-only sections remain shared, while writable sections are shared as long as their contents remain unchanged.\nWhen changes happen, the process making the change receives a unique frame as a modified copy of the original frame ",(0,o.kt)("em",{parentName:"p"},"on demand"),"."),(0,o.kt)("p",null,"In the image below we have the state of the child and parent processes right after ",(0,o.kt)("inlineCode",{parentName:"p"},"fork()")," returns in both of them.\nSee how each has its own VAS, both of them being mapped to (mostly) the same PAS."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Copy-on-Write",src:n(53267).Z,width:"782",height:"402"})),(0,o.kt)("p",null,"When one process writes data to a writeable page (in our case, the child writes to a heap page), the frame to which it corresponds is first duplicated.\nThen the process' page table points the page to the newly copied frame, as you can see in the image below."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Copy-on-Write",src:n(94095).Z,width:"821",height:"363"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Be careful!"),"\nDo not confuse ",(0,o.kt)("strong",{parentName:"p"},"copy-on-write")," with ",(0,o.kt)("strong",{parentName:"p"},"demand paging"),".\nRemember from the ",(0,o.kt)("a",{parentName:"p",href:"../../../data/"},"Data chapter")," that ",(0,o.kt)("strong",{parentName:"p"},"demand paging")," means that when you allocate memory the OS allocates virtual memory that remains unmapped to physical memory until it's used.\nOn the other hand, ",(0,o.kt)("strong",{parentName:"p"},"copy-on-write")," posits that the virtual memory is already mapped to some frames.\nThese frames are only duplicated when one of the processes attempts to write data to them."),(0,o.kt)("h3",{id:"practice"},"Practice"),(0,o.kt)("p",null,"Now let's see the copy-on-write mechanism in practice.\nKeep in mind that ",(0,o.kt)("inlineCode",{parentName:"p"},"fork()")," is a function used to create a process."),(0,o.kt)("p",null,"Open two terminals (or better: use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tmux/tmux/wiki"},(0,o.kt)("inlineCode",{parentName:"a"},"tmux")),").\nIn one of them compile and run the code in ",(0,o.kt)("inlineCode",{parentName:"p"},"support/fork-faults/fork_faults.c"),".\nAfter each time you press ",(0,o.kt)("inlineCode",{parentName:"p"},"Enter")," in the first terminal window, run the following command in the second window:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../lab/support/fork-faults$ ps -o min_flt,maj_flt -p $(pidof fork_faults)\n")),(0,o.kt)("p",null,"It will show you the number of minor and major page faults performed by the ",(0,o.kt)("inlineCode",{parentName:"p"},"fork_faults")," process and its child."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/operating-systems/Lab/Compute/Synchronization/quiz/parent-faults-before-fork"},"Quiz 1")),(0,o.kt)("p",null,"Note that after ",(0,o.kt)("inlineCode",{parentName:"p"},"fork()"),"-ing, there is a second row in the output of ",(0,o.kt)("inlineCode",{parentName:"p"},"ps"),".\nThat corresponds to the child process.\nThe first one still corresponds to the parent."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/operating-systems/Lab/Compute/Synchronization/quiz/child-faults-after-write"},"Quiz 2")),(0,o.kt)("p",null,"Now it should be clear how demand paging differs from copy-on-write.\nShared memory is a similar concept.\nIt's a way of marking certain allocated pages so that copy-on-write is disabled.\nAs you may imagine, changes made by the parent to this memory are visible to the child and vice-versa.\nYou can learn more about it ",(0,o.kt)("a",{parentName:"p",href:"/operating-systems/Lab/Compute/Synchronization/content/arena#shared-memory"},"its dedicated section in the Arena"),"."))}h.isMDXComponent=!0},94095:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/copy-on-write-final-2dfe1835636c0b38b11fed42b5b690d2.svg"},53267:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/copy-on-write-initial-a3673d26b2087aaacf630bc556e0a6a8.svg"}}]);